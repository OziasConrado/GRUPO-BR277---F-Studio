
rules_version = '2';

service firebase.storage {
  
  // Helper functions to be used in the rules.
  function isAuthenticated() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isAuthenticated() && request.auth.uid == userId;
  }

  function isImage(resource) {
    return resource.contentType.matches('image/jpeg|image/png|image/webp');
  }
  
  function isVideo(resource) {
    return resource.contentType.matches('video/mp4|video/webm|video/quicktime');
  }
  
  function isAudio(resource) {
    return resource.contentType.matches('audio/webm|audio/mp4|audio/mpeg');
  }

  function isWithinSizeLimit(resource, maxSizeInMB) {
    return resource.size < maxSizeInMB * 1024 * 1024;
  }

  match /b/{bucket}/o {
    
    // Default allow public read access to all files, but deny all writes.
    // Specific write rules are defined for each path below.
    // This approach avoids issues with special characters in folder names.
    match /{allPaths=**} {
      allow read: if true;
      allow write: if false;
    }

    // Profile Pictures
    // A user can only write to their own folder. Must be an image <= 2MB.
    match /profile_pictures/{userId}/{fileName} {
      allow write: if isOwner(userId) && isImage(request.resource) && isWithinSizeLimit(request.resource, 2);
    }
    
    // Chat Media (PRIVATE READ/WRITE)
    // Override the default public read access. Only authenticated users can access.
    // A user can only write to their own folder.
    match /chat_images/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isImage(request.resource) && isWithinSizeLimit(request.resource, 5);
    }
    
    match /chat_audio/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isAudio(request.resource) && isWithinSizeLimit(request.resource, 10);
    }
    
    // Post Images (Public Read from default rule)
    match /images/{userId}/{fileName} {
      allow write: if isOwner(userId) && isImage(request.resource) && isWithinSizeLimit(request.resource, 5);
    }
    
    // Post Videos (Public Read from default rule)
    match /videos/{userId}/{fileName} {
      allow write: if isOwner(userId) && isVideo(request.resource) && isWithinSizeLimit(request.resource, 50);
    }
    
    // Indicated Points Images (Public Read from default rule)
    match /indicated_points_images/{userId}/{fileName} {
      allow write: if isOwner(userId) && isImage(request.resource) && isWithinSizeLimit(request.resource, 2);
    }
  }
}
