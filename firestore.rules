rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read public profiles, and only they can create/update their own.
    match /Usuarios/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;

      // Notifications are private to the user
      match /notifications/{notificationId} {
        allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Author can update/soft-delete their post. Others can only update reactions.
      allow update: if request.auth != null &&
                     (request.auth.uid == resource.data.userId ||
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'poll']));

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      match /userReactions/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow update: if false;
      }

      match /userVotes/{userId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if false;
      }
    }

    // Rules for reels
    match /reels/{reelId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Author can update/delete, others can only update reactions.
      allow update: if request.auth != null &&
                     (request.auth.uid == resource.data.userId ||
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']));
      allow delete: if request.auth.uid == resource.data.userId;


      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
      }

      match /userReactions/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow update: if false;
      }
    }

    // Alerts can be read by anyone, created by authenticated users.
    match /alerts/{alertId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // SAU reviews can be read by anyone, created by authenticated users.
    match /sau_reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Indicated tourist points
    match /tourist_points_indicated/{pointId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false; // Managed by admin
    }

    // Chat messages
    match /chatMessages/{messageId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;

      match /userReactions/{userId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow update: if false;
      }
    }
  }
}
