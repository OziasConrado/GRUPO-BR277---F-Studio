rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regra para perfil de usuário
    match /Usuarios/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Regra para notificações de usuário
    match /Usuarios/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Regra para posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                      (request.resource.data.userId == request.auth.uid ||
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly('reactions') ||
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly('poll')));
      allow delete: if false; // Posts are soft-deleted via an 'deleted' field update

      // Subcoleção de reações do post
      match /userReactions/{userId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Subcoleção de votos da enquete
      match /userVotes/{userId} {
          allow read: if true;
          allow create: if request.auth != null && request.auth.uid == userId;
          allow update, delete: if false;
      }

      // Subcoleção de comentários
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null &&
                      (request.resource.data.userId == request.auth.uid ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly('reactions'));
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

        // Subcoleção de reações do comentário
        match /commentReactions/{userId} {
            allow read: if true;
            allow write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    // Regra para reels
    match /reels/{reelId} {
      allow read: if resource.data.deleted == false;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                      (request.resource.data.userId == request.auth.uid ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly('reactions'));
      allow delete: if false;

        // Subcoleção de reações do reel
        match /userReactions/{userId} {
            allow read: if true;
            allow write: if request.auth != null && request.auth.uid == userId;
        }
        
        // Subcoleção de comentários do reel
        match /comments/{commentId} {
            allow read: if true;
            allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
        }
    }

    // Regra para o chat da comunidade
    match /chatMessages/{messageId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
                      (request.resource.data.userId == request.auth.uid ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly('reactions'));
      allow delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Subcoleção de reações da mensagem
      match /userReactions/{userId} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Regras para SAUs e avaliações
    match /sau_reviews/{reviewId} {
        allow read, create: if request.auth != null;
    }

    // Regras para Pontos Turísticos e avaliações
    match /tourist_points_indicated/{pointId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null; // Permite atualização de contagem de reviews e média
    }
    match /tourist_point_reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null;
    }
  }
}
